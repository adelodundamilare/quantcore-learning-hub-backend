# A generic, single database configuration.

[alembic]
# Path to migration scripts
# Use forward slashes (/) for OS-agnostic paths
script_location = migrations

# Uncomment the following line to prepend date and time to migration file names
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# Defaults to the current working directory
prepend_sys_path = .

# The sqlalchemy.url value will be dynamically set in env.py
sqlalchemy.url = postgresql+psycopg2://DATABASE_USER:DATABASE_PASSWORD@DATABASE_HOST:DATABASE_PORT/DATABASE_NAME


# Specify version locations if using multiple directories
# version_locations = %(here)s/migrations/versions

# Separator for version locations
version_path_separator = os  # Use os.pathsep by default

# Set to 'true' to recursively search for source files in version directories
# recursive_version_locations = false

# The output encoding for generated migration files
# output_encoding = utf-8


[post_write_hooks]
# Define hooks to run on newly generated revision scripts
# Uncomment and configure if you want formatting or linting hooks

# Example: format using "black"
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# Example: lint with attempts to fix using "ruff"
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME


# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
